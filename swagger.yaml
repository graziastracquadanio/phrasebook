openapi: 3.1.0
info:
  version: 1.0.0
  title: Phrase book API specifications
  contact:
    email: graziastracquadanio@gmail.com
  description: |
    The Phrase Book app is a web-based application that enables users to access a custom phrasebook, 
    containing phrases they have created.
servers:
  - url: https://example.com/v1/api
tags:
  - name: User
    description: This section contains all of the APIs for managing users.
  - name: Phrase
    description: This section contains all of the APIs for managing phrases.
  - name: Collection
    description: This section contains all of the APIs for managing collections.
paths:
  /users:
    post:
      summary: Creates a new users.
      operationId: createUser
      description: This API is used to create a new user.
      tags:
        - Users
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleUser"
              password:
                description: The user's plain text password.
                type: string
      responses:
        200:
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: |-
            The request was invalid and/or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    summary: Set of methods to manage the user.
    parameters:
      - name: id
        in: path
        description: The unique identifier of the user whose information is being requested.
        required: true
        schema:
          type: string
    get:
      summary: Get specific user details.
      description: Retrieves detailed information about a specific user.
      operationId: getUser
      tags:
        - User
      security: []
      responses:
        200:
          description: Returns the user information in JSON format.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: User with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    SimpleUser:
      type: object
      properties:
        username:
          description: The user supplied username
          type: string
        email:
          description: The user's email address
          type: string
          format: email
    User:
      allOf:
        - $ref: "#/components/schemas/SimpleUser"
        - type: object
          properties:
            id:
              description: The user's unique Id.
              type: string
            token:
              description: The access token, this string is an encoded JSON Web Token (JWT).
              type: string
    Error:
      type: object
      properties:
        status:
          type: string
          description: This is the same as the HTTP status of the response.
        code:
          type: string
          description: A status code that indicates the error type.
        message:
          type: string
          description: A short description of the error.
