openapi: 3.0.0
info:
  version: 1.0.0
  title: Phrasebook API specifications
  contact:
    email: graziastracquadanio@gmail.com
  description: |
    The Phrasebook app is a web-based application that enables users to access a custom phrasebook, 
    containing phrases they have created.
servers:
  - url: https://example.com/v1/api
tags:
  - name: User
    description: This section contains all of the APIs for managing users.
  - name: Phrase
    description: This section contains all of the APIs for managing phrases.
  - name: Collection
    description: This section contains all of the APIs for managing collections.
paths:
  /signup:
    post:
      summary: Creates a new user
      description: This API is used to create a new user.
      operationId: signup
      tags: [User]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/SimpleUser"
                - type: object
                  properties:
                    password:
                      description: The user's plain text password.
                      type: string
      responses:
        201:
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: |-
            The request was invalid and/or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/500InternalServerError"

  /login:
    post:
      summary: User login
      description: Authenticate user using their username and password. If successful it provides user information and a JWT token.
      operationId: login
      tags: [User]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The user supplied username
                  type: string
                password:
                  description: The user's plain text password.
                  type: string
              required: [username, password]
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    description: The access token, this string is an encoded JSON Web Token (JWT).
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/404UserErrorResponse"
        500:
          $ref: "#/components/responses/500InternalServerError"

  /users/{id}:
    parameters:
      - name: id
        in: path
        description: The unique identifier of the user whose information is being requested.
        required: true
        schema:
          type: string
    get:
      summary: Get specific user details
      description: Retrieves detailed information about a specific user.
      operationId: getUser
      tags: [User]
      security: []
      responses:
        200:
          description: Returns the user information in JSON format.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/401SessionExpiredError"
        404:
          $ref: "#/components/responses/404UserErrorResponse"
        500:
          $ref: "#/components/responses/500InternalServerError"

    put:
      summary: Update specific user details
      description: Update the details of an existing user.
      operationId: updateUser
      tags: [User]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleUser"
      responses:
        200:
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/400ErrorResponse"
        401:
          $ref: "#/components/responses/401SessionExpiredError"
        404:
          $ref: "#/components/responses/404UserErrorResponse"
        500:
          $ref: "#/components/responses/500InternalServerError"

    delete:
      summary: Delete specific user
      description: Delete a specific user by their user ID.
      operationId: deleteUser
      tags: [User]
      security: []
      responses:
        200:
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully.
        401:
          $ref: "#/components/responses/401SessionExpiredError"
        404:
          $ref: "#/components/responses/404UserErrorResponse"
        500:
          $ref: "#/components/responses/500InternalServerError"

components:
  schemas:
    SimpleUser:
      type: object
      properties:
        username:
          description: The user supplied username
          type: string
        email:
          description: The user email address
          type: string
          format: email
    User:
      allOf:
        - $ref: "#/components/schemas/SimpleUser"
        - type: object
          properties:
            id:
              description: The user unique identifier.
              type: string
    Error:
      type: object
      properties:
        status:
          type: string
          description: The HTTP status of the response.
        code:
          type: string
          description: A status code that indicates the error type.
        message:
          type: string
          description: A short description of the error.
  responses:
    400ErrorResponse:
      description: Bad request. Invalid input parameters.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    401SessionExpiredError:
      description: Session expired. The user needs to re-authenticate.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            status: "401"
            code: "SESSION_EXPIRED"
            message: "Your session has expired. Please log in again."
    404UserErrorResponse:
      description: User not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    500InternalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
